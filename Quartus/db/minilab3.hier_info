|minilab3
CLOCK_50 => CLOCK_50.IN2
CLOCK2_50 => ~NO_FANOUT~
CLOCK3_50 => ~NO_FANOUT~
CLOCK4_50 => ~NO_FANOUT~
HEX0[0] <= <GND>
HEX0[1] <= <GND>
HEX0[2] <= <GND>
HEX0[3] <= <GND>
HEX0[4] <= <GND>
HEX0[5] <= <GND>
HEX0[6] <= <VCC>
HEX1[0] <= <GND>
HEX1[1] <= <GND>
HEX1[2] <= <GND>
HEX1[3] <= <GND>
HEX1[4] <= <GND>
HEX1[5] <= <GND>
HEX1[6] <= <VCC>
HEX2[0] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[1] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[2] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[3] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[4] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[5] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[6] <= <GND>
HEX3[0] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[1] <= <GND>
HEX3[2] <= <GND>
HEX3[3] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[4] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[5] <= <GND>
HEX3[6] <= <GND>
HEX4[0] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX4[1] <= br_cfg[1].DB_MAX_OUTPUT_PORT_TYPE
HEX4[2] <= br_cfg[1].DB_MAX_OUTPUT_PORT_TYPE
HEX4[3] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX4[4] <= <VCC>
HEX4[5] <= <VCC>
HEX4[6] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
HEX5[0] <= <VCC>
HEX5[1] <= <VCC>
HEX5[2] <= <VCC>
HEX5[3] <= <VCC>
HEX5[4] <= <VCC>
HEX5[5] <= <VCC>
HEX5[6] <= <VCC>
KEY[0] => rst.IN2
KEY[1] => ~NO_FANOUT~
KEY[2] => ~NO_FANOUT~
KEY[3] => ~NO_FANOUT~
LEDR[0] <= rst.DB_MAX_OUTPUT_PORT_TYPE
LEDR[1] <= <GND>
LEDR[2] <= <GND>
LEDR[3] <= <GND>
LEDR[4] <= <GND>
LEDR[5] <= <GND>
LEDR[6] <= <GND>
LEDR[7] <= <GND>
LEDR[8] <= spart:spart0.txd
LEDR[9] <= rxd.DB_MAX_OUTPUT_PORT_TYPE
SW[0] => ~NO_FANOUT~
SW[1] => ~NO_FANOUT~
SW[2] => ~NO_FANOUT~
SW[3] => ~NO_FANOUT~
SW[4] => ~NO_FANOUT~
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
SW[8] => br_cfg[0].IN1
SW[9] => br_cfg[1].IN1
GPIO[0] <> <UNC>
GPIO[1] <> <UNC>
GPIO[2] <> <UNC>
GPIO[3] <> GPIO[3]
GPIO[4] <> <UNC>
GPIO[6] <> <UNC>
GPIO[7] <> <UNC>
GPIO[8] <> <UNC>
GPIO[9] <> <UNC>
GPIO[10] <> <UNC>
GPIO[11] <> <UNC>
GPIO[12] <> <UNC>
GPIO[13] <> <UNC>
GPIO[14] <> <UNC>
GPIO[15] <> <UNC>
GPIO[16] <> <UNC>
GPIO[17] <> <UNC>
GPIO[18] <> <UNC>
GPIO[19] <> <UNC>
GPIO[20] <> <UNC>
GPIO[21] <> <UNC>
GPIO[22] <> <UNC>
GPIO[23] <> <UNC>
GPIO[24] <> <UNC>
GPIO[25] <> <UNC>
GPIO[26] <> <UNC>
GPIO[27] <> <UNC>
GPIO[28] <> <UNC>
GPIO[29] <> <UNC>
GPIO[30] <> <UNC>
GPIO[31] <> <UNC>
GPIO[32] <> <UNC>
GPIO[33] <> <UNC>
GPIO[34] <> <UNC>
GPIO[35] <> <UNC>


|minilab3|spart:spart0
clk => tbr~reg0.CLK
clk => rda~reg0.CLK
clk => bit_counter[0].CLK
clk => bit_counter[1].CLK
clk => bit_counter[2].CLK
clk => bit_counter[3].CLK
clk => txd~reg0.CLK
clk => transmit_shift_reg[0].CLK
clk => transmit_shift_reg[1].CLK
clk => transmit_shift_reg[2].CLK
clk => transmit_shift_reg[3].CLK
clk => transmit_shift_reg[4].CLK
clk => transmit_shift_reg[5].CLK
clk => transmit_shift_reg[6].CLK
clk => transmit_shift_reg[7].CLK
clk => transmit_shift_reg[8].CLK
clk => receive_buffer[0].CLK
clk => receive_buffer[1].CLK
clk => receive_buffer[2].CLK
clk => receive_buffer[3].CLK
clk => receive_buffer[4].CLK
clk => receive_buffer[5].CLK
clk => receive_buffer[6].CLK
clk => receive_buffer[7].CLK
clk => receive_shift_reg[0].CLK
clk => receive_shift_reg[1].CLK
clk => receive_shift_reg[2].CLK
clk => receive_shift_reg[3].CLK
clk => receive_shift_reg[4].CLK
clk => receive_shift_reg[5].CLK
clk => receive_shift_reg[6].CLK
clk => receive_shift_reg[7].CLK
clk => receive_shift_reg[8].CLK
clk => RX2.CLK
clk => RX1.CLK
clk => baud_counter[0].CLK
clk => baud_counter[1].CLK
clk => baud_counter[2].CLK
clk => baud_counter[3].CLK
clk => baud_counter[4].CLK
clk => baud_counter[5].CLK
clk => baud_counter[6].CLK
clk => baud_counter[7].CLK
clk => baud_counter[8].CLK
clk => baud_counter[9].CLK
clk => baud_counter[10].CLK
clk => baud_counter[11].CLK
clk => baud_counter[12].CLK
clk => baud_counter[13].CLK
clk => baud_counter[14].CLK
clk => baud_counter[15].CLK
clk => state~1.DATAIN
rst => txd~reg0.PRESET
rst => transmit_shift_reg[0].PRESET
rst => transmit_shift_reg[1].ACLR
rst => transmit_shift_reg[2].ACLR
rst => transmit_shift_reg[3].ACLR
rst => transmit_shift_reg[4].ACLR
rst => transmit_shift_reg[5].ACLR
rst => transmit_shift_reg[6].ACLR
rst => transmit_shift_reg[7].ACLR
rst => transmit_shift_reg[8].ACLR
rst => receive_buffer[0].ACLR
rst => receive_buffer[1].ACLR
rst => receive_buffer[2].ACLR
rst => receive_buffer[3].ACLR
rst => receive_buffer[4].ACLR
rst => receive_buffer[5].ACLR
rst => receive_buffer[6].ACLR
rst => receive_buffer[7].ACLR
rst => receive_shift_reg[0].ACLR
rst => receive_shift_reg[1].ACLR
rst => receive_shift_reg[2].ACLR
rst => receive_shift_reg[3].ACLR
rst => receive_shift_reg[4].ACLR
rst => receive_shift_reg[5].ACLR
rst => receive_shift_reg[6].ACLR
rst => receive_shift_reg[7].ACLR
rst => receive_shift_reg[8].ACLR
rst => tbr~reg0.ACLR
rst => rda~reg0.ACLR
rst => RX2.PRESET
rst => RX1.PRESET
rst => bit_counter[0].ACLR
rst => bit_counter[1].ACLR
rst => bit_counter[2].ACLR
rst => bit_counter[3].ACLR
rst => state~3.DATAIN
iocs => division_buffer.IN0
iocs => databus.IN1
iocs => databus.IN1
iocs => always6.IN1
iocs => always6.IN1
iorw => databus.IN1
iorw => databus.IN1
iorw => division_buffer.IN1
rda <= rda~reg0.DB_MAX_OUTPUT_PORT_TYPE
tbr <= tbr~reg0.DB_MAX_OUTPUT_PORT_TYPE
ioaddr[0] => Equal0.IN1
ioaddr[0] => Equal1.IN1
ioaddr[0] => Equal3.IN0
ioaddr[0] => Equal4.IN1
ioaddr[1] => Equal0.IN0
ioaddr[1] => Equal1.IN0
ioaddr[1] => Equal3.IN1
ioaddr[1] => Equal4.IN0
databus[0] <> databus[0]
databus[1] <> databus[1]
databus[2] <> databus[2]
databus[3] <> databus[3]
databus[4] <> databus[4]
databus[5] <> databus[5]
databus[6] <> databus[6]
databus[7] <> databus[7]
txd <= txd~reg0.DB_MAX_OUTPUT_PORT_TYPE
rxd => RX1.DATAIN


|minilab3|driver:driver0
clk => br_cfg_ff[0].CLK
clk => br_cfg_ff[1].CLK
clk => baud_byte_cnt.CLK
clk => state~1.DATAIN
rst => baud_byte_cnt.ACLR
rst => state~3.DATAIN
br_cfg[0] => Equal0.IN1
br_cfg[0] => br_cfg_ff[0].DATAIN
br_cfg[0] => Equal1.IN1
br_cfg[0] => Equal2.IN1
br_cfg[0] => Equal3.IN0
br_cfg[0] => Equal4.IN1
br_cfg[1] => Equal0.IN0
br_cfg[1] => br_cfg_ff[1].DATAIN
br_cfg[1] => Equal1.IN0
br_cfg[1] => Equal2.IN0
br_cfg[1] => Equal3.IN1
br_cfg[1] => Equal4.IN0
iocs <= <VCC>
iorw <= Selector12.DB_MAX_OUTPUT_PORT_TYPE
rda => next_state.OUTPUTSELECT
rda => next_state.OUTPUTSELECT
rda => next_state.OUTPUTSELECT
rda => next_state.OUTPUTSELECT
rda => iorw.DATAA
rda => always3.IN0
tbr => always3.IN1
tbr => next_state.OUTPUTSELECT
tbr => next_state.OUTPUTSELECT
tbr => next_state.OUTPUTSELECT
tbr => next_state.OUTPUTSELECT
ioaddr[0] <= ioaddr.DB_MAX_OUTPUT_PORT_TYPE
ioaddr[1] <= ioaddr[1].DB_MAX_OUTPUT_PORT_TYPE
databus[0] <> databus[0]
databus[1] <> databus[1]
databus[2] <> databus[2]
databus[3] <> databus[3]
databus[4] <> databus[4]
databus[5] <> databus[5]
databus[6] <> databus[6]
databus[7] <> databus[7]


